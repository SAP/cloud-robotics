---
# Source: kube-prometheus-stack/charts/kube-state-metrics/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:    
    helm.sh/chart: kube-state-metrics-4.3.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: zzzgggzzzggg-kube-state-metrics
    app.kubernetes.io/name: zzzgggzzzggg-kube-state-metrics
    app.kubernetes.io/instance: prom
    app.kubernetes.io/version: "2.3.0"
    release: prom
  name: zzzgggzzzggg-kube-state-metrics
  namespace: ${HELM-NAMESPACE}
imagePullSecrets:
  []
---
# Source: kube-prometheus-stack/charts/prometheus-node-exporter/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: zzzgggzzzggg-prometheus-node-exporter
  namespace: ${HELM-NAMESPACE}
  labels:
    app: zzzgggzzzggg-prometheus-node-exporter
    chart: prometheus-node-exporter-2.4.1
    release: "prom"
    heritage: "Helm"
  annotations:
    {}
imagePullSecrets:
  []
---
# Source: kube-prometheus-stack/templates/prometheus-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ${TENANT}-kube-operator
  namespace: ${HELM-NAMESPACE}
  labels:
    app: ${TENANT}-kube-operator
    app.kubernetes.io/name: ${TENANT}-kube-prometheus-operator
    app.kubernetes.io/component: prometheus-operator
    
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: prom
    app.kubernetes.io/version: "30.0.1"
    app.kubernetes.io/part-of: ${TENANT}-kube
    chart: kube-prometheus-stack-30.0.1
    release: "prom"
    heritage: "Helm"
---
# Source: kube-prometheus-stack/templates/prometheus/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ${TENANT}-kube-prometheus
  namespace: ${HELM-NAMESPACE}
  labels:
    app: ${TENANT}-kube-prometheus
    app.kubernetes.io/name: ${TENANT}-kube-prometheus
    app.kubernetes.io/component: prometheus
    
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: prom
    app.kubernetes.io/version: "30.0.1"
    app.kubernetes.io/part-of: ${TENANT}-kube
    chart: kube-prometheus-stack-30.0.1
    release: "prom"
    heritage: "Helm"
---
# Source: kube-prometheus-stack/charts/kube-state-metrics/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:    
    helm.sh/chart: kube-state-metrics-4.3.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: zzzgggzzzggg-kube-state-metrics
    app.kubernetes.io/name: zzzgggzzzggg-kube-state-metrics
    app.kubernetes.io/instance: prom
    app.kubernetes.io/version: "2.3.0"
    release: prom
  name: zzzgggzzzggg-kube-state-metrics
rules:

- apiGroups: ["certificates.k8s.io"]
  resources:
  - certificatesigningrequests
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - configmaps
  verbs: ["list", "watch"]

- apiGroups: ["batch"]
  resources:
  - cronjobs
  verbs: ["list", "watch"]

- apiGroups: ["extensions", "apps"]
  resources:
  - daemonsets
  verbs: ["list", "watch"]

- apiGroups: ["extensions", "apps"]
  resources:
  - deployments
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - endpoints
  verbs: ["list", "watch"]

- apiGroups: ["autoscaling"]
  resources:
  - horizontalpodautoscalers
  verbs: ["list", "watch"]

- apiGroups: ["extensions", "networking.k8s.io"]
  resources:
  - ingresses
  verbs: ["list", "watch"]

- apiGroups: ["batch"]
  resources:
  - jobs
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - limitranges
  verbs: ["list", "watch"]

- apiGroups: ["admissionregistration.k8s.io"]
  resources:
    - mutatingwebhookconfigurations
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - namespaces
  verbs: ["list", "watch"]

- apiGroups: ["networking.k8s.io"]
  resources:
  - networkpolicies
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - nodes
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - persistentvolumeclaims
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - persistentvolumes
  verbs: ["list", "watch"]

- apiGroups: ["policy"]
  resources:
    - poddisruptionbudgets
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - pods
  verbs: ["list", "watch"]

- apiGroups: ["extensions", "apps"]
  resources:
  - replicasets
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - replicationcontrollers
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - resourcequotas
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - secrets
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - services
  verbs: ["list", "watch"]

- apiGroups: ["apps"]
  resources:
  - statefulsets
  verbs: ["list", "watch"]

- apiGroups: ["storage.k8s.io"]
  resources:
    - storageclasses
  verbs: ["list", "watch"]

- apiGroups: ["admissionregistration.k8s.io"]
  resources:
    - validatingwebhookconfigurations
  verbs: ["list", "watch"]

- apiGroups: ["storage.k8s.io"]
  resources:
    - volumeattachments
  verbs: ["list", "watch"]
---
# Source: kube-prometheus-stack/templates/prometheus-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ${TENANT}-kube-operator
  labels:
    app: ${TENANT}-kube-operator
    
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: prom
    app.kubernetes.io/version: "30.0.1"
    app.kubernetes.io/part-of: ${TENANT}-kube
    chart: kube-prometheus-stack-30.0.1
    release: "prom"
    heritage: "Helm"
rules:
- apiGroups:
  - monitoring.coreos.com
  resources:
  - alertmanagers
  - alertmanagers/finalizers
  - alertmanagerconfigs
  - prometheuses
  - prometheuses/finalizers
  - thanosrulers
  - thanosrulers/finalizers
  - servicemonitors
  - podmonitors
  - probes
  - prometheusrules
  verbs:
  - '*'
- apiGroups:
  - apps
  resources:
  - statefulsets
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - configmaps
  - secrets
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - list
  - delete
- apiGroups:
  - ""
  resources:
  - services
  - services/finalizers
  - endpoints
  verbs:
  - get
  - create
  - update
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
---
# Source: kube-prometheus-stack/templates/prometheus/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ${TENANT}-kube-prometheus
  labels:
    app: ${TENANT}-kube-prometheus
    
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: prom
    app.kubernetes.io/version: "30.0.1"
    app.kubernetes.io/part-of: ${TENANT}-kube
    chart: kube-prometheus-stack-30.0.1
    release: "prom"
    heritage: "Helm"
rules:
# This permission are not in the kube-prometheus repo
# they're grabbed from https://github.com/prometheus/prometheus/blob/master/documentation/examples/rbac-setup.yml
- apiGroups: [""]
  resources:
  - nodes
  - nodes/metrics
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - "networking.k8s.io"
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics", "/metrics/cadvisor"]
  verbs: ["get"]
---
# Source: kube-prometheus-stack/charts/kube-state-metrics/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:    
    helm.sh/chart: kube-state-metrics-4.3.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: zzzgggzzzggg-kube-state-metrics
    app.kubernetes.io/name: zzzgggzzzggg-kube-state-metrics
    app.kubernetes.io/instance: prom
    app.kubernetes.io/version: "2.3.0"
    release: prom
  name: zzzgggzzzggg-kube-state-metrics
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: zzzgggzzzggg-kube-state-metrics
subjects:
- kind: ServiceAccount
  name: zzzgggzzzggg-kube-state-metrics
  namespace: ${HELM-NAMESPACE}
---
# Source: kube-prometheus-stack/templates/prometheus-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ${TENANT}-kube-operator
  labels:
    app: ${TENANT}-kube-operator
    
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: prom
    app.kubernetes.io/version: "30.0.1"
    app.kubernetes.io/part-of: ${TENANT}-kube
    chart: kube-prometheus-stack-30.0.1
    release: "prom"
    heritage: "Helm"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ${TENANT}-kube-operator
subjects:
- kind: ServiceAccount
  name: ${TENANT}-kube-operator
  namespace: ${HELM-NAMESPACE}
---
# Source: kube-prometheus-stack/templates/prometheus/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ${TENANT}-kube-prometheus
  labels:
    app: ${TENANT}-kube-prometheus
    
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: prom
    app.kubernetes.io/version: "30.0.1"
    app.kubernetes.io/part-of: ${TENANT}-kube
    chart: kube-prometheus-stack-30.0.1
    release: "prom"
    heritage: "Helm"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ${TENANT}-kube-prometheus
subjects:
  - kind: ServiceAccount
    name: ${TENANT}-kube-prometheus
    namespace: ${HELM-NAMESPACE}
---
# Source: kube-prometheus-stack/charts/kube-state-metrics/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: zzzgggzzzggg-kube-state-metrics
  namespace: ${HELM-NAMESPACE}
  labels:    
    helm.sh/chart: kube-state-metrics-4.3.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: zzzgggzzzggg-kube-state-metrics
    app.kubernetes.io/name: zzzgggzzzggg-kube-state-metrics
    app.kubernetes.io/instance: prom
    app.kubernetes.io/version: "2.3.0"
    release: prom
  annotations:
    prometheus.io/scrape: 'true'
spec:
  type: "ClusterIP"
  ports:
  - name: "http"
    protocol: TCP
    port: 8080
    targetPort: 8080
  
  selector:    
    app.kubernetes.io/name: zzzgggzzzggg-kube-state-metrics
    app.kubernetes.io/instance: prom
---
# Source: kube-prometheus-stack/charts/prometheus-node-exporter/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: zzzgggzzzggg-prometheus-node-exporter
  namespace: ${HELM-NAMESPACE}
  annotations:
    prometheus.io/scrape: "true"
  labels:     
    app: zzzgggzzzggg-prometheus-node-exporter
    heritage: Helm
    release: prom
    chart: prometheus-node-exporter-2.4.1
    jobLabel: node-exporter
spec:
  type: ClusterIP
  ports:
    - port: 9100
      targetPort: 9100
      protocol: TCP
      name: http-metrics
  selector:
    app: zzzgggzzzggg-prometheus-node-exporter
    release: prom
---
# Source: kube-prometheus-stack/templates/prometheus-operator/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ${TENANT}-kube-operator
  namespace: ${HELM-NAMESPACE}
  labels:
    app: ${TENANT}-kube-operator
    
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: prom
    app.kubernetes.io/version: "30.0.1"
    app.kubernetes.io/part-of: ${TENANT}-kube
    chart: kube-prometheus-stack-30.0.1
    release: "prom"
    heritage: "Helm"
spec:
  ports:
  - name: https
    port: 443
    targetPort: https
  selector:
    app: ${TENANT}-kube-operator
    release: "prom"
  type: "ClusterIP"
---
# Source: kube-prometheus-stack/templates/prometheus/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ${TENANT}-kube-prometheus
  namespace: ${HELM-NAMESPACE}
  labels:
    app: ${TENANT}-kube-prometheus
    self-monitor: "true"
    
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: prom
    app.kubernetes.io/version: "30.0.1"
    app.kubernetes.io/part-of: ${TENANT}-kube
    chart: kube-prometheus-stack-30.0.1
    release: "prom"
    heritage: "Helm"
spec:
  ports:
  - name: http-web
    port: 9090
    targetPort: 9090
  publishNotReadyAddresses: false
  selector:
    app.kubernetes.io/name: prometheus
    prometheus: ${TENANT}-kube-prometheus
  type: "ClusterIP"
---
# Source: kube-prometheus-stack/charts/prometheus-node-exporter/templates/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: zzzgggzzzggg-prometheus-node-exporter
  namespace: ${HELM-NAMESPACE}
  labels:     
    app: zzzgggzzzggg-prometheus-node-exporter
    heritage: Helm
    release: prom
    chart: prometheus-node-exporter-2.4.1
    jobLabel: node-exporter
spec:
  selector:
    matchLabels:
      app: zzzgggzzzggg-prometheus-node-exporter
      release: prom
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:         
        app: zzzgggzzzggg-prometheus-node-exporter
        heritage: Helm
        release: prom
        chart: prometheus-node-exporter-2.4.1
        jobLabel: node-exporter
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      automountServiceAccountToken: false
      serviceAccountName: zzzgggzzzggg-prometheus-node-exporter
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      containers:
        - name: node-exporter
          image: quay.io/prometheus/node-exporter:v1.3.1
          imagePullPolicy: IfNotPresent
          args:
            - --path.procfs=/host/proc
            - --path.sysfs=/host/sys
            - --path.rootfs=/host/root
            - --web.listen-address=$(HOST_IP):9100
            - --collector.wifi
            - --collector.filesystem.ignored-fs-types=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|fuse\.\w*|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
          env:
          - name: HOST_IP
            value: 0.0.0.0
          ports:
            - name: http-metrics
              containerPort: 9100
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: 9100
          readinessProbe:
            httpGet:
              path: /
              port: 9100
          resources:
            {}
          volumeMounts:
            - name: proc
              mountPath: /host/proc
              readOnly:  true
            - name: sys
              mountPath: /host/sys
              readOnly: true
            - name: root
              mountPath: /host/root
              mountPropagation: HostToContainer
              readOnly: true
      hostNetwork: true
      hostPID: true
      tolerations:
        - effect: NoSchedule
          operator: Exists
      volumes:
        - name: proc
          hostPath:
            path: /proc
        - name: sys
          hostPath:
            path: /sys
        - name: root
          hostPath:
            path: /
---
# Source: kube-prometheus-stack/charts/kube-state-metrics/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zzzgggzzzggg-kube-state-metrics
  namespace: ${HELM-NAMESPACE}
  labels:    
    helm.sh/chart: kube-state-metrics-4.3.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: zzzgggzzzggg-kube-state-metrics
    app.kubernetes.io/name: zzzgggzzzggg-kube-state-metrics
    app.kubernetes.io/instance: prom
    app.kubernetes.io/version: "2.3.0"
    release: prom
spec:
  selector:
    matchLabels:      
      app.kubernetes.io/name: zzzgggzzzggg-kube-state-metrics
      app.kubernetes.io/instance: prom
  replicas: 1
  template:
    metadata:
      labels:        
        helm.sh/chart: kube-state-metrics-4.3.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: metrics
        app.kubernetes.io/part-of: zzzgggzzzggg-kube-state-metrics
        app.kubernetes.io/name: zzzgggzzzggg-kube-state-metrics
        app.kubernetes.io/instance: prom
        app.kubernetes.io/version: "2.3.0"
        release: prom
    spec:
      hostNetwork: false
      serviceAccountName: zzzgggzzzggg-kube-state-metrics
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsUser: 65534
      containers:
      - name: kube-state-metrics
        args:
        - --port=8080
        - --resources=certificatesigningrequests,configmaps,cronjobs,daemonsets,deployments,endpoints,horizontalpodautoscalers,ingresses,jobs,limitranges,mutatingwebhookconfigurations,namespaces,networkpolicies,nodes,persistentvolumeclaims,persistentvolumes,poddisruptionbudgets,pods,replicasets,replicationcontrollers,resourcequotas,secrets,services,statefulsets,storageclasses,validatingwebhookconfigurations,volumeattachments
        - --telemetry-port=8081
        imagePullPolicy: IfNotPresent
        image: "k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.3.0"
        ports:
        - containerPort: 8080
          name: "http"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 5
---
# Source: kube-prometheus-stack/templates/prometheus-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${TENANT}-kube-operator
  namespace: ${HELM-NAMESPACE}
  labels:
    app: ${TENANT}-kube-operator
    
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: prom
    app.kubernetes.io/version: "30.0.1"
    app.kubernetes.io/part-of: ${TENANT}-kube
    chart: kube-prometheus-stack-30.0.1
    release: "prom"
    heritage: "Helm"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${TENANT}-kube-operator
      release: "prom"
  template:
    metadata:
      labels:
        app: ${TENANT}-kube-operator
        
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: prom
        app.kubernetes.io/version: "30.0.1"
        app.kubernetes.io/part-of: ${TENANT}-kube
        chart: kube-prometheus-stack-30.0.1
        release: "prom"
        heritage: "Helm"
    spec:
      containers:
        - name: ${TENANT}-kube
          image: "quay.io/prometheus-operator/prometheus-operator:v0.53.1"
          imagePullPolicy: "IfNotPresent"
          args:
            - --kubelet-service=kube-system/${TENANT}-kube-kubelet
            - --localhost=127.0.0.1
            - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.53.1
            - --config-reloader-cpu-request=100m
            - --config-reloader-cpu-limit=100m
            - --config-reloader-memory-request=50Mi
            - --config-reloader-memory-limit=50Mi
            - --thanos-default-base-image=quay.io/thanos/thanos:v0.24.0
            - --web.enable-tls=true
            - --web.cert-file=/cert/cert
            - --web.key-file=/cert/key
            - --web.listen-address=:10250
            - --web.tls-min-version=VersionTLS13
          ports:
            - containerPort: 10250
              name: https
          resources:
            {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          volumeMounts:
            - name: tls-secret
              mountPath: /cert
              readOnly: true
      volumes:
        - name: tls-secret
          secret:
            defaultMode: 420
            secretName: ${TENANT}-kube-admission
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      serviceAccountName: ${TENANT}-kube-operator
---
# Source: kube-prometheus-stack/templates/prometheus-operator/admission-webhooks/mutatingWebhookConfiguration.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name:  ${TENANT}-kube-admission
  labels:
    app: ${TENANT}-kube-admission    
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: prom
    app.kubernetes.io/version: "30.0.1"
    app.kubernetes.io/part-of: ${TENANT}-kube
    chart: kube-prometheus-stack-30.0.1
    release: "prom"
    heritage: "Helm"
webhooks:
  - name: prometheusrulemutate.monitoring.coreos.com
    failurePolicy: Ignore
    rules:
      - apiGroups:
          - monitoring.coreos.com
        apiVersions:
          - "*"
        resources:
          - prometheusrules
        operations:
          - CREATE
          - UPDATE
    clientConfig:
      service:
        namespace: ${HELM-NAMESPACE}
        name: ${TENANT}-kube-operator
        path: /admission-prometheusrules/mutate
    admissionReviewVersions: ["v1", "v1beta1"]
    sideEffects: None
---
# Source: kube-prometheus-stack/templates/prometheus/prometheus.yaml
apiVersion: monitoring.coreos.com/v1
kind: Prometheus
metadata:
  name: ${TENANT}-kube-prometheus
  namespace: ${HELM-NAMESPACE}
  labels:
    app: ${TENANT}-kube-prometheus
    
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: prom
    app.kubernetes.io/version: "30.0.1"
    app.kubernetes.io/part-of: ${TENANT}-kube
    chart: kube-prometheus-stack-30.0.1
    release: "prom"
    heritage: "Helm"
spec:
  alerting:
    alertmanagers:
      []
  image: "quay.io/prometheus/prometheus:v2.32.1"
  version: v2.32.1
  externalUrl: http://${TENANT}-kube-prometheus.${HELM-NAMESPACE}:9090
  paused: false
  replicas: 1
  shards: 1
  logLevel:  info
  logFormat:  logfmt
  listenLocal: false
  enableAdminAPI: false
  retention: "3d"
  routePrefix: "/"
  serviceAccountName: ${TENANT}-kube-prometheus
  serviceMonitorSelector:
    any: true

  serviceMonitorNamespaceSelector:
    any: true

  podMonitorSelector:
    any: true

  podMonitorNamespaceSelector:
    any: true

  probeSelector:
    matchLabels:
      release: "prom"

  probeNamespaceSelector: {}
  securityContext:
    fsGroup: 2000
    runAsGroup: 2000
    runAsNonRoot: true
    runAsUser: 1000
  ruleNamespaceSelector:
    any: true

  ruleSelector:
    matchLabels:
      release: "prom"

  portName: http-web
---
# Source: kube-prometheus-stack/charts/kube-state-metrics/templates/servicemonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: zzzgggzzzggg-kube-state-metrics
  namespace: ${HELM-NAMESPACE}
  labels:    
    helm.sh/chart: kube-state-metrics-4.3.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: zzzgggzzzggg-kube-state-metrics
    app.kubernetes.io/name: zzzgggzzzggg-kube-state-metrics
    app.kubernetes.io/instance: prom
    app.kubernetes.io/version: "2.3.0"
    release: prom
spec:
  jobLabel: app.kubernetes.io/name
  selector:
    matchLabels:      
      app.kubernetes.io/name: zzzgggzzzggg-kube-state-metrics
      app.kubernetes.io/instance: prom
  endpoints:
    - port: http
      honorLabels: true
---
# Source: kube-prometheus-stack/charts/prometheus-node-exporter/templates/servicemonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: zzzgggzzzggg-prometheus-node-exporter
  namespace: ${HELM-NAMESPACE}
  labels:     
    app: zzzgggzzzggg-prometheus-node-exporter
    heritage: Helm
    release: prom
    chart: prometheus-node-exporter-2.4.1
    jobLabel: node-exporter
spec:
  jobLabel: jobLabel
  selector:
    matchLabels:
      app: zzzgggzzzggg-prometheus-node-exporter
      release: prom
  endpoints:
    - port: http-metrics
      scheme: http
---
# Source: kube-prometheus-stack/templates/exporters/kube-api-server/servicemonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: ${TENANT}-kube-apiserver
  namespace: ${HELM-NAMESPACE}
  labels:
    app: ${TENANT}-kube-apiserver
    
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: prom
    app.kubernetes.io/version: "30.0.1"
    app.kubernetes.io/part-of: ${TENANT}-kube
    chart: kube-prometheus-stack-30.0.1
    release: "prom"
    heritage: "Helm"
spec:
  endpoints:
  - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
    interval: 10m
    port: https
    scheme: https
    tlsConfig:
      caFile: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      serverName: kubernetes
      insecureSkipVerify: false
  jobLabel: component
  namespaceSelector:
    matchNames:
    - default
  selector:
    matchLabels:
      component: apiserver
      provider: kubernetes
---
# Source: kube-prometheus-stack/templates/exporters/kubelet/servicemonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: ${TENANT}-kube-kubelet
  namespace: ${HELM-NAMESPACE}
  labels:
    app: ${TENANT}-kube-kubelet    
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: prom
    app.kubernetes.io/version: "30.0.1"
    app.kubernetes.io/part-of: ${TENANT}-kube
    chart: kube-prometheus-stack-30.0.1
    release: "prom"
    heritage: "Helm"
spec:
  endpoints:
  - port: https-metrics
    scheme: https
    tlsConfig:
      caFile: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      insecureSkipVerify: true
    bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
    honorLabels: true
    relabelings:
    - sourceLabels:
      - __metrics_path__
      targetLabel: metrics_path
  - port: https-metrics
    scheme: https
    path: /metrics/cadvisor
    honorLabels: true
    tlsConfig:
      caFile: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      insecureSkipVerify: true
    bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
    relabelings:
    - sourceLabels:
      - __metrics_path__
      targetLabel: metrics_path
  - port: https-metrics
    scheme: https
    path: /metrics/probes
    honorLabels: true
    tlsConfig:
      caFile: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      insecureSkipVerify: true
    bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
    relabelings:
    - sourceLabels:
      - __metrics_path__
      targetLabel: metrics_path
  jobLabel: k8s-app
  namespaceSelector:
    matchNames:
    - kube-system
  selector:
    matchLabels:
      app.kubernetes.io/name: kubelet
      k8s-app: kubelet
---
# Source: kube-prometheus-stack/templates/prometheus-operator/servicemonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: ${TENANT}-kube-operator
  namespace: ${HELM-NAMESPACE}
  labels:
    app: ${TENANT}-kube-operator
    
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: prom
    app.kubernetes.io/version: "30.0.1"
    app.kubernetes.io/part-of: ${TENANT}-kube
    chart: kube-prometheus-stack-30.0.1
    release: "prom"
    heritage: "Helm"
spec:
  endpoints:
  - port: https
    scheme: https
    tlsConfig:
      serverName: ${TENANT}-kube-operator
      ca:
        secret:
          name: ${TENANT}-kube-admission
          key: ca
          optional: false
    honorLabels: true
  selector:
    matchLabels:
      app: ${TENANT}-kube-operator
      release: "prom"
  namespaceSelector:
    matchNames:
      - "${HELM-NAMESPACE}"
---
# Source: kube-prometheus-stack/templates/prometheus/servicemonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: ${TENANT}-kube-prometheus
  namespace: ${HELM-NAMESPACE}
  labels:
    app: ${TENANT}-kube-prometheus
    
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: prom
    app.kubernetes.io/version: "30.0.1"
    app.kubernetes.io/part-of: ${TENANT}-kube
    chart: kube-prometheus-stack-30.0.1
    release: "prom"
    heritage: "Helm"
spec:
  selector:
    matchLabels:
      app: ${TENANT}-kube-prometheus
      release: "prom"
      self-monitor: "true"
  namespaceSelector:
    matchNames:
      - "${HELM-NAMESPACE}"
  endpoints:
  - port: http-web
    path: "/metrics"
---
# Source: kube-prometheus-stack/templates/prometheus-operator/admission-webhooks/validatingWebhookConfiguration.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name:  ${TENANT}-kube-admission
  labels:
    app: ${TENANT}-kube-admission    
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: prom
    app.kubernetes.io/version: "30.0.1"
    app.kubernetes.io/part-of: ${TENANT}-kube
    chart: kube-prometheus-stack-30.0.1
    release: "prom"
    heritage: "Helm"
webhooks:
  - name: prometheusrulemutate.monitoring.coreos.com
    failurePolicy: Ignore
    rules:
      - apiGroups:
          - monitoring.coreos.com
        apiVersions:
          - "*"
        resources:
          - prometheusrules
        operations:
          - CREATE
          - UPDATE
    clientConfig:
      service:
        namespace: ${HELM-NAMESPACE}
        name: ${TENANT}-kube-operator
        path: /admission-prometheusrules/validate
    admissionReviewVersions: ["v1", "v1beta1"]
    sideEffects: None
---
# Source: kube-prometheus-stack/templates/prometheus-operator/admission-webhooks/job-patch/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name:  ${TENANT}-kube-admission
  namespace: ${HELM-NAMESPACE}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: ${TENANT}-kube-admission    
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: prom
    app.kubernetes.io/version: "30.0.1"
    app.kubernetes.io/part-of: ${TENANT}-kube
    chart: kube-prometheus-stack-30.0.1
    release: "prom"
    heritage: "Helm"
---
# Source: kube-prometheus-stack/templates/prometheus-operator/admission-webhooks/job-patch/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name:  ${TENANT}-kube-admission
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: ${TENANT}-kube-admission    
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: prom
    app.kubernetes.io/version: "30.0.1"
    app.kubernetes.io/part-of: ${TENANT}-kube
    chart: kube-prometheus-stack-30.0.1
    release: "prom"
    heritage: "Helm"
rules:
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - validatingwebhookconfigurations
      - mutatingwebhookconfigurations
    verbs:
      - get
      - update
---
# Source: kube-prometheus-stack/templates/prometheus-operator/admission-webhooks/job-patch/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name:  ${TENANT}-kube-admission
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: ${TENANT}-kube-admission    
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: prom
    app.kubernetes.io/version: "30.0.1"
    app.kubernetes.io/part-of: ${TENANT}-kube
    chart: kube-prometheus-stack-30.0.1
    release: "prom"
    heritage: "Helm"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ${TENANT}-kube-admission
subjects:
  - kind: ServiceAccount
    name: ${TENANT}-kube-admission
    namespace: ${HELM-NAMESPACE}
---
# Source: kube-prometheus-stack/templates/prometheus-operator/admission-webhooks/job-patch/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name:  ${TENANT}-kube-admission
  namespace: ${HELM-NAMESPACE}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: ${TENANT}-kube-admission    
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: prom
    app.kubernetes.io/version: "30.0.1"
    app.kubernetes.io/part-of: ${TENANT}-kube
    chart: kube-prometheus-stack-30.0.1
    release: "prom"
    heritage: "Helm"
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - create
---
# Source: kube-prometheus-stack/templates/prometheus-operator/admission-webhooks/job-patch/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name:  ${TENANT}-kube-admission
  namespace: ${HELM-NAMESPACE}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: ${TENANT}-kube-admission    
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: prom
    app.kubernetes.io/version: "30.0.1"
    app.kubernetes.io/part-of: ${TENANT}-kube
    chart: kube-prometheus-stack-30.0.1
    release: "prom"
    heritage: "Helm"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ${TENANT}-kube-admission
subjects:
  - kind: ServiceAccount
    name: ${TENANT}-kube-admission
    namespace: ${HELM-NAMESPACE}
---
# Source: kube-prometheus-stack/templates/prometheus-operator/admission-webhooks/job-patch/job-createSecret.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name:  ${TENANT}-kube-admission-create
  namespace: ${HELM-NAMESPACE}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: ${TENANT}-kube-admission-create    
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: prom
    app.kubernetes.io/version: "30.0.1"
    app.kubernetes.io/part-of: ${TENANT}-kube
    chart: kube-prometheus-stack-30.0.1
    release: "prom"
    heritage: "Helm"
spec:
  template:
    metadata:
      name:  ${TENANT}-kube-admission-create
      labels:
        app: ${TENANT}-kube-admission-create        
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: prom
        app.kubernetes.io/version: "30.0.1"
        app.kubernetes.io/part-of: ${TENANT}-kube
        chart: kube-prometheus-stack-30.0.1
        release: "prom"
        heritage: "Helm"
    spec:
      containers:
        - name: create
          image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.0@sha256:f3b6b39a6062328c095337b4cadcefd1612348fdd5190b1dcbcb9b9e90bd8068
          imagePullPolicy: IfNotPresent
          args:
            - create
            - --host=${TENANT}-kube-operator,${TENANT}-kube-operator.${HELM-NAMESPACE}.svc
            - --namespace=${HELM-NAMESPACE}
            - --secret-name=${TENANT}-kube-admission
          resources:
            {}
      restartPolicy: OnFailure
      serviceAccountName: ${TENANT}-kube-admission
      securityContext:
        runAsGroup: 2000
        runAsNonRoot: true
        runAsUser: 2000
---
# Source: kube-prometheus-stack/templates/prometheus-operator/admission-webhooks/job-patch/job-patchWebhook.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name:  ${TENANT}-kube-admission-patch
  namespace: ${HELM-NAMESPACE}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: ${TENANT}-kube-admission-patch    
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: prom
    app.kubernetes.io/version: "30.0.1"
    app.kubernetes.io/part-of: ${TENANT}-kube
    chart: kube-prometheus-stack-30.0.1
    release: "prom"
    heritage: "Helm"
spec:
  template:
    metadata:
      name:  ${TENANT}-kube-admission-patch
      labels:
        app: ${TENANT}-kube-admission-patch        
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: prom
        app.kubernetes.io/version: "30.0.1"
        app.kubernetes.io/part-of: ${TENANT}-kube
        chart: kube-prometheus-stack-30.0.1
        release: "prom"
        heritage: "Helm"
    spec:
      containers:
        - name: patch
          image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.0@sha256:f3b6b39a6062328c095337b4cadcefd1612348fdd5190b1dcbcb9b9e90bd8068
          imagePullPolicy: IfNotPresent
          args:
            - patch
            - --webhook-name=${TENANT}-kube-admission
            - --namespace=${HELM-NAMESPACE}
            - --secret-name=${TENANT}-kube-admission
            - --patch-failure-policy=Fail
          resources:
            {}
      restartPolicy: OnFailure
      serviceAccountName: ${TENANT}-kube-admission
      securityContext:
        runAsGroup: 2000
        runAsNonRoot: true
        runAsUser: 2000
